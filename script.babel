//const Declarations
const { render } = ReactDOM;
const { Provider, connect } = ReactRedux;
const { createStore } = Redux;
const { Component } = React;

//action types
const DISPLAY = "DISPLAY";
const ARG1 = "ARG1";
const ARG2 = "ARG2";
const OP = "OP";
const RESULT = "RESULT";
const INPUT = "INPUT";
const updateDisplay = (display) => {
  return {
    type: DISPLAY,
    display: display,
  };
};
const changeArg1 = (arg1) => {
  return {
    type: ARG1,
    arg1: arg1,
  };
};
const changeArg2 = (arg2) => {
  return {
    type: ARG2,
    arg2: arg2,
  };
};
const changeOp = (op) => {
  return {
    type: OP,
    op: op,
  };
};
const updateResult = (result) => {
  return {
    type: RESULT,
    result: result,
  };
};
const updateInput = (input) => {
  return {
    type: INPUT,
    input: input,
  };
};
//Redux
const reducer = (
  state = { display: "0", arg1: "0", arg2: "0", op: "", result: "", input: "" },
  action
) => {
  switch (action.type) {
    case DISPLAY:
      return Object.assign({}, state, { display: action.display });
    case ARG1:
      return Object.assign({}, state, { arg1: action.arg1 });
    case ARG2:
      return Object.assign({}, state, { arg2: action.arg2 });
    case OP:
      return Object.assign({}, state, { op: action.op });
    case RESULT:
      return Object.assign({}, state, { result: action.result });
    case INPUT:
      return Object.assign({}, state, { input: action.input });
    default:
      return state;
  }
};

const store = createStore(reducer);
//React
class Button extends Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <div
        className="calc-button"
        style={this.props.style}
        id={this.props.ID}
        onClick={this.props.handleClick}
      >
        {this.props.value}
      </div>
    );
  }
}
class NumPad extends Component {
  constructor(props) {
    super(props);
    this.handleNumPad = this.handleNumPad.bind(this);
  }
  handleNumPad(e) {
    let display = this.props.display;
    let input = e.target.innerHTML;
    let previousInput = this.props.input;
    let newDisplay;
    let arg1 = this.props.arg1;

    //store the operator that was last used
    if (/[/*+-]/.test(previousInput)) {
      this.props.changeOp(previousInput);
    }
    switch (true) {
      //when display is '0'
      case /^0$/.test(display):
        input.match(/\./) ? (newDisplay = "0.") : (newDisplay = input);
        break;
      //when display contains a decimal and user presses decimal button
      case /\./.test(display) && input == ".":
        arg1 == display ? (newDisplay = "0.") : (newDisplay = display);
        break;
      //all other cases
      default:
        arg1 != 0 && !/[0-9\.]/.test(previousInput)
          ? (newDisplay = input)
          : (newDisplay = display + input);
        break;
    }
    this.props.updateDisplay(newDisplay);
    this.props.updateInput(input);
  }
  render() {
    return (
      <div id="numPad" className="calc-section">
        <Button
          ID="seven"
          value="7"
          style={{ gridArea: "seven" }}
          handleClick={this.handleNumPad}
        />
        <Button
          ID="eight"
          value="8"
          style={{ gridArea: "eight" }}
          handleClick={this.handleNumPad}
        />
        <Button
          ID="nine"
          value="9"
          style={{ gridArea: "nine" }}
          handleClick={this.handleNumPad}
        />
        <Button
          ID="four"
          value="4"
          style={{ gridArea: "four" }}
          handleClick={this.handleNumPad}
        />
        <Button
          ID="five"
          value="5"
          style={{ gridArea: "five" }}
          handleClick={this.handleNumPad}
        />
        <Button
          ID="six"
          value="6"
          style={{ gridArea: "six" }}
          handleClick={this.handleNumPad}
        />
        <Button
          ID="one"
          value="1"
          style={{ gridArea: "one" }}
          handleClick={this.handleNumPad}
        />
        <Button
          ID="two"
          value="2"
          style={{ gridArea: "two" }}
          handleClick={this.handleNumPad}
        />
        <Button
          ID="three"
          value="3"
          style={{ gridArea: "three" }}
          handleClick={this.handleNumPad}
        />
        <Button
          ID="zero"
          value="0"
          style={{
            gridArea: "zero",
            alignContent: "center",
            justifyContent: "flex-start",
            padding: "0 30px",
          }}
          handleClick={this.handleNumPad}
        />
        <Button
          ID="decimal"
          value="."
          style={{ gridArea: "decimal" }}
          handleClick={this.handleNumPad}
        />
      </div>
    );
  }
}
class Operators extends Component {
  constructor(props) {
    super(props);
    this.handleOperators = this.handleOperators.bind(this);
  }
  handleOperators(e) {
    let input = e.target.innerHTML;
    let previousInput = this.props.input;
    let operator = e.target.innerHTML;
    let display = this.props.display;
    let mathOp;
    let result;
    let arg1 = this.props.arg1;
    let arg2 = this.props.arg2;
    let op = this.props.op;

    switch (true) {
      case /[+-]/.test(operator):
        mathOp = operator;
        //when user inputs a new operator immediately after inputting '=' skip everything.
        if (/=/.test(previousInput)) {
          break;
        }
        if (arg1 != 0 && op != "" && !/[/*+-]/.test(previousInput)) {
          //check to see if the previous value was '='
          result = Math.round(1000000 * eval(arg1 + op + display)) / 1000000;
          this.props.changeArg1(result);
          this.props.updateDisplay(result);
        } else {
          this.props.changeArg1(display);
        }
        break;
      case operator == decodeURI("%C3%B7"):
        mathOp = "/";
        if (/=/.test(previousInput)) {
          break;
        }
        if (arg1 != 0 && op != "" && !/[/*+-]/.test(previousInput)) {
          result = Math.round(1000000 * eval(arg1 + op + display)) / 1000000;

          this.props.changeArg1(result);
          this.props.updateDisplay(result);
        } else {
          this.props.changeArg1(display);
        }
        break;
      case operator == "x":
        mathOp = "*";
        if (/=/.test(previousInput)) {
          break;
        }
        if (arg1 != 0 && op != "" && !/[/*+-]/.test(previousInput)) {
          result = Math.round(1000000 * eval(arg1 + op + display)) / 1000000;
          this.props.changeArg1(result);
          this.props.updateDisplay(result);
        } else {
          this.props.changeArg1(display);
        }
        break;
      case operator == "=":
        mathOp = operator;
        if (arg1 != 0 && op != "" && !/=/.test(previousInput)) {
          result = Math.round(1000000 * eval(arg1 + op + display)) / 1000000;
          this.props.changeArg1(result);
          this.props.changeArg2(display);
          this.props.updateDisplay(result);
        } else if (arg1 != 0 && op != "" && /=/.test(previousInput)) {
          result = Math.round(1000000 * eval(arg1 + op + arg2)) / 1000000;
          this.props.changeArg1(result);
          this.props.updateDisplay(result);
        } else {
          this.props.changeArg1(display);
        }
        break;
      default:
        console.log("this is the default case for the operator type");
        break;
    }
    this.props.updateInput(mathOp);
  }

  render() {
    return (
      <div id="operators" className="calc-section">
        <Button ID="divide" value="&#247;" handleClick={this.handleOperators} />
        <Button ID="multiply" value="x" handleClick={this.handleOperators} />
        <Button ID="subtract" value="-" handleClick={this.handleOperators} />
        <Button ID="add" value="+" handleClick={this.handleOperators} />
        <Button ID="equals" value="=" handleClick={this.handleOperators} />
      </div>
    );
  }
}
class Tools extends Component {
  constructor(props) {
    super(props);
    this.handleTools = this.handleTools.bind(this);
  }
  handleTools(e) {
    let input = e.target.innerHTML;
    switch (true) {
      case e.target.innerHTML == "AC":
        //initialize the calc again
        this.props.updateDisplay("0");
        this.props.changeArg1("0");
        this.props.updateResult("");
        this.props.changeOp("");
        break;
      case e.target.innerHTML == "+/-":
        this.props.updateDisplay(eval(this.props.display * -1));
        break;
      case e.target.innerHTML == "%":
        this.props.updateDisplay(eval(this.props.display / 100));
        break;
      default:
        console.log("problem with handleTools function");
        break;
    }
  }
  render() {
    return (
      <div id="tools" className="calc-section">
        <Button ID="clear" value="AC" handleClick={this.handleTools} />
        <Button ID="sign" value="+/-" handleClick={this.handleTools} />
        <Button ID="percent" value="%" handleClick={this.handleTools} />
      </div>
    );
  }
}
class Display extends Component {
  constructor(props) {
    super(props);
    this.handleDisplay = this.handleDisplay.bind(this);
  }
  handleDisplay() {
    //this will take the this.props.display and return a user friendly version to #display element - upgrade point
  }
  render() {
    return (
      <div className="item" id="display">
        {this.props.display}
      </div>
    );
  }
}
class App extends Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div id="app">
        <h1> Calculator Redux</h1>
        <div id="calculator">
          <Display formula={this.props.formula} display={this.props.display} />
          <div className="item" id="calc-layout">
            <Tools />
            <Operators />
            <NumPad />
          </div>
        </div>
      </div>
    );
  }
}
//React-Redux

const mapStateToProps = (state) => {
  return {
    display: state.display,
    arg1: state.arg1,
    arg2: state.arg2,
    op: state.op,
    result: state.result,
    input: state.input,
  };
};
const mapDispatchToProps = (dispatch) => {
  return {
    updateDisplay: (display) => {
      dispatch(updateDisplay(display));
    },
    changeArg1: (arg1) => {
      dispatch(changeArg1(arg1));
    },
    changeArg2: (arg2) => {
      dispatch(changeArg2(arg2));
    },
    changeOp: (op) => {
      dispatch(changeOp(op));
    },
    updateResult: (result) => {
      dispatch(updateResult(result));
    },
    updateInput: (input) => {
      dispatch(updateInput(input));
    },
  };
};
const Container = connect(mapStateToProps, mapDispatchToProps)(App);
Tools = connect(mapStateToProps, mapDispatchToProps)(Tools);
NumPad = connect(mapStateToProps, mapDispatchToProps)(NumPad);
Operators = connect(mapStateToProps, mapDispatchToProps)(Operators);
render(
  <Provider store={store}>
    <Container />
  </Provider>,
  document.getElementById("root")
);
